@page "/asset/{Id:int}/edit"
@inject Services.IAssetService assetService
@inject Services.IItemService itemService
@inject Services.IVendorService vendorService
@inject Services.IClientInformationService clientInformationService
@using AutoMapper;
@inject IMapper _mapper;
@using System.Text.Json
@using Anthurium.API.Dtos
@inject NavigationManager NavManager
@inject IToastService toastService


<h3>Edit Asset Information</h3>
@if (assetReadDto == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row m-2">

        <div class="offset-sm-9 col-sm-3 text-right"> <a class="btn btn-primary active btn-sm " role="button" aria-pressed="true" href="/asset">Return to List</a></div>
    </div>
    <div class="row m-2">

        <EditForm Model="@assetUpdateDto" OnValidSubmit="@UpdateAsset">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group row">
                <label for="ClientInformationId" class="col-sm-6 col-form-label">Client Info:</label>
                <select id="ClientInformationId" class="form-control selectpicker" value="@assetUpdateDto.ClientInformationId" @onchange="ChangeClient">
                    <option>--select--</option>
                    @foreach (var item in clientInformationReadDtos)
                    {
                        <option value="@item.ClientInformationId">@item.CompanyName</option>
                    }
                </select>
            </div>

            <div class="form-group row">
                <label for="ItemId" class="col-sm-6 col-form-label">Item Name:</label>
                <select id="ItemId" class="form-control selectpicker" value="@assetUpdateDto.ItemId" @onchange="ChangeItem">
                    <option>--select--</option>
                    @foreach (var item in itemReadDtos)
                    {
                        <option value="@item.ItemId">@item.ItemName</option>
                    }
                </select>
            </div>

            <div class="form-group row">
                <label for="clientInformationId" class="col-sm-6 col-form-label">Vendor Name:</label>
                <select id="ClientInformationId" class="form-control selectpicker" value="@assetUpdateDto.VendorId" @onchange="ChangeVendor">
                    <option>--select--</option>
                    @foreach (var item in vendorReadDtos)
                    {
                        <option value="@item.VendorId">@item.VendorName</option>
                    }
                </select>
            </div>
           <div class="form-group row">
            <label for="SerialNumber" class="col-sm-6 col-form-label">Serial Number:</label>
            <input id="SerialNumber" class="form-control col-sm-6 input-lg" type="text" placeholder="Serial Number" disabled="@isSuccess"
                   @bind="assetUpdateDto.SerialNumber" />
        </div>
        <div class="form-group row">
            <label for="WarrantyDate" class="col-sm-6 col-form-label">Warranty Date:</label>
            <input id="WarrantyDate" class="form-control col-sm-6 input-lg" placeholder="Warranty Date" type="date" disabled="@isSuccess"
                   @bind="assetUpdateDto.WarrantyDate" />
        </div>



            <button class="btn btn-primary" type="submit" disabled="@isSuccess">Submit</button>
            <div class="alert @(isSuccess?"alert-success":"alert-danger")" style="margin-top:1rem" role="alert"
                 hidden="@(message=="")">@message</div>
            </EditForm>


        </div>
    }


@code {
    [Parameter]
    public int Id { get; set; }

    private bool isSuccess = false;
    private string message = "";
    private int matchingCount;

    private List<VendorReadDto> vendorReadDtos = new List<VendorReadDto>();
    private VendorReadDto vendorReadDto { get; set; } = new VendorReadDto();
    private List<ClientInformationReadDto> clientInformationReadDtos = new List<ClientInformationReadDto>();
    private ClientInformationReadDto clientInformationReadDto { get; set; } = new ClientInformationReadDto();
    private List<ItemReadDto> itemReadDtos = new List<ItemReadDto>();
    private ItemReadDto itemReadDto { get; set; } = new ItemReadDto();



    private AssetUpdateDto assetUpdateDto { get; set; } = new AssetUpdateDto();
    private AssetReadDto assetReadDto { get; set; } = new AssetReadDto();

    protected override async Task OnInitializedAsync()
    {
        await FetchListAsync();
        assetReadDto = await assetService.GetAssetByIdAsync(Id);
        _mapper.Map(assetReadDto, assetUpdateDto);
    }


    private async Task ChangeClient(ChangeEventArgs e)
    {

        clientInformationReadDto = await clientInformationService.GetClientInformationByIdAsync(Int32.Parse(e.Value.ToString()));
        _mapper.Map(clientInformationReadDto, assetUpdateDto);
        message = "";
    }
    private async Task ChangeItem(ChangeEventArgs e)
    {

        itemReadDto = await itemService.GetItemByIdAsync(Int32.Parse(e.Value.ToString()));
        _mapper.Map(itemReadDto, assetUpdateDto);
        message = "";
    }
    private async Task ChangeVendor(ChangeEventArgs e)
    {

        vendorReadDto = await vendorService.GetVendorByIdAsync(Int32.Parse(e.Value.ToString()));
        _mapper.Map(vendorReadDto, assetUpdateDto);
        message = "";
    }
    private async Task FetchListAsync()
    {
        var responseVendor = await vendorService.GetVendorsAsync("VendorName", 0);
        vendorReadDtos = responseVendor.Vendor;

        var responseItem = await itemService.GetItemsAsync("ItemName", 0);
        itemReadDtos = responseItem.Item;

        var responseClientinformation = await clientInformationService.GetClientInformationsAsync("CompanyName", 0);
        clientInformationReadDtos = responseClientinformation.ClientInformation;



    }
    public async void UpdateAsset()
    {


        //returns response message, so can check if success
        var response = await assetService.EditAssetAsync(Id, assetUpdateDto);
        if (response.IsSuccessStatusCode)
        {
            isSuccess = true;
            message = $"Success";
            toastService.ShowInfo($" asset information: {assetUpdateDto.SerialNumber} is Updated.");
            NavManager.NavigateTo("/asset");
            //navigate to single page
            //perhaps set flag (success) there that will display message if coming from this page
        }
        else
        {
            message = $"Error: {response.StatusCode.ToString()}. Please try again.";
            toastService.ShowError($" Cannot edit {assetUpdateDto.SerialNumber}. Please try again.");
        }

        this.StateHasChanged();
    }


}