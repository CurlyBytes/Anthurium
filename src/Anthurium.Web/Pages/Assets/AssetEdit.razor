@page "/asset/{Id:int}/edit"
@attribute [Authorize]
@inject Services.IAssetService assetService
@inject Services.IItemService itemService
@inject Services.IVendorService vendorService
@inject Services.IClientInformationService clientInformationService
@inject Services.IAlertService AlertService
@inject Services.IWarehouseService warehouseService
@inject NavigationManager NavigationManager
@inject IMapper _mapper;
@using AutoMapper;
@using System.Text.Json
@using Anthurium.API.Dtos


<h3>Edit Asset Information</h3>
@if (assetReadDto != null)
{
<EditForm Model="@assetUpdateDto" OnValidSubmit="@UpdateAsset">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col">
            <label>Client Info: </label>

            <InputSelect @bind-Value="assetUpdateDto.ClientInformationId" class="selectpicker" @onchange="ChangeClient">
                <option>--select--</option>
                @foreach (var item in clientInformationReadDtos)
                    {
                    <option value="@item.ClientInformationId">@item.CompanyName</option>
                    }
            </InputSelect>
            <ValidationMessage For="@(() => assetUpdateDto.ClientInformationId)" />
        </div>
        <div class="form-group col">
            <label>Item name: </label>

            <InputSelect @bind-Value="assetUpdateDto.ItemId" class="selectpicker" @onchange="ChangeItem">
                <option>--select--</option>
                @foreach (var item in itemReadDtos)
                    {
                    <option value="@item.ItemId">@item.ItemName</option>
                    }
            </InputSelect>
            <ValidationMessage For="@(() => assetUpdateDto.ItemId)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label>Vendor Name: </label>

            <InputSelect @bind-Value="assetUpdateDto.VendorId" class="selectpicker" @onchange="ChangeVendor">
                <option>--select--</option>
                @foreach (var item in vendorReadDtos)
                    {
                    <option value="@item.VendorId">@item.VendorName</option>
                    }
            </InputSelect>
            <ValidationMessage For="@(() => assetUpdateDto.VendorId)" />
        </div>
        <div class="form-group col">
            <div class="form-group col">
                <label>Serial Number:</label>
                <InputText @bind-Value="assetUpdateDto.SerialNumber" class="form-control" placeholder="Serial Number" />
                <ValidationMessage For="@(() => assetUpdateDto.SerialNumber)" />
            </div>
        </div>
    </div>

    <div class="form-row">
        <div class="form-group col">
            <label>Warranty Date:</label>
            <InputDate @bind-Value="assetUpdateDto.WarrantyDate" class="form-control" />
            <ValidationMessage For="@(() => assetUpdateDto.WarrantyDate)" />
        </div>
    </div>


    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Save
        </button>
        <NavLink href="warehouse" class="btn btn-link">Cancel</NavLink>
    </div>
</EditForm>
}
else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private bool loading;
    private int matchingCount;

    private List<VendorReadDto> vendorReadDtos = new List<VendorReadDto>();
    private VendorReadDto vendorReadDto { get; set; } = new VendorReadDto();
    private List<ClientInformationReadDto> clientInformationReadDtos = new List<ClientInformationReadDto>();
    private ClientInformationReadDto clientInformationReadDto { get; set; } = new ClientInformationReadDto();
    private List<ItemReadDto> itemReadDtos = new List<ItemReadDto>();
    private ItemReadDto itemReadDto { get; set; } = new ItemReadDto();



    private AssetUpdateDto assetUpdateDto { get; set; } = new AssetUpdateDto();
    private AssetReadDto assetReadDto { get; set; } = new AssetReadDto();

    protected override async Task OnInitializedAsync()
    {
        await FetchListAsync();
        assetReadDto = await assetService.GetAssetByIdAsync(Id);
        _mapper.Map(assetReadDto, assetUpdateDto);
    }


    private async Task ChangeClient(ChangeEventArgs e)
    {

        clientInformationReadDto = await clientInformationService.GetClientInformationByIdAsync(Int32.Parse(e.Value.ToString()));
        _mapper.Map(clientInformationReadDto, assetUpdateDto);
    }
    private async Task ChangeItem(ChangeEventArgs e)
    {

        itemReadDto = await itemService.GetItemByIdAsync(Int32.Parse(e.Value.ToString()));
        _mapper.Map(itemReadDto, assetUpdateDto);
    }
    private async Task ChangeVendor(ChangeEventArgs e)
    {

        vendorReadDto = await vendorService.GetVendorByIdAsync(Int32.Parse(e.Value.ToString()));
        _mapper.Map(vendorReadDto, assetUpdateDto);

    }
    private async Task FetchListAsync()
    {
        var responseVendor = await vendorService.GetVendorsAsync("VendorName", 0);
        vendorReadDtos = responseVendor.Vendor;

        var responseItem = await itemService.GetItemsAsync("ItemName", 0);
        itemReadDtos = responseItem.Item;

        var responseClientinformation = await clientInformationService.GetClientInformationsAsync("CompanyName", 0);
        clientInformationReadDtos = responseClientinformation.ClientInformation;



    }
    public async void UpdateAsset()
    {


        loading = true;
        try
        {
            await assetService.EditAssetAsync(Id, assetUpdateDto);
            AlertService.Success("Update successful", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("/asset");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }


}