@page "/clientinformation/{Id:int}/edit"
@inject Services.IClientInformationService clientInformationtService
@inject Services.IAlertService AlertService
@inject NavigationManager NavigationManager
@inject IMapper _mapper;
@using AutoMapper;
@using System.Text.Json
@using Anthurium.API.Dtos



<h3>Warehouse</h3>
@if (clientInformationReadDto != null)
{
<EditForm Model="@clientInformationUpdateDto" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="form-row">
        <div class="form-group col">
            <label>Company Name:</label>
            <InputText @bind-Value="clientInformationUpdateDto.CompanyName" class="form-control" />
            <ValidationMessage For="@(() => clientInformationUpdateDto.CompanyName)" />
        </div>
        <div class="form-group col">
            <label>Company Address:</label>
            <InputText @bind-Value="clientInformationUpdateDto.CompanyAddress" class="form-control" />
            <ValidationMessage For="@(() => clientInformationUpdateDto.CompanyAddress)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label>Contact Person:</label>
            <InputText @bind-Value="clientInformationUpdateDto.ContactPerson" class="form-control" />
            <ValidationMessage For="@(() => clientInformationUpdateDto.ContactPerson)" />
        </div>
        <div class="form-group col">
            <label>Contact Number:</label>
            <InputText @bind-Value="clientInformationUpdateDto.ContactNumber" class="form-control" />
            <ValidationMessage For="@(() => clientInformationUpdateDto.ContactNumber)" />
        </div>
    </div>
    <div class="form-row">
        <div class="form-group col">
            <label>Contact Email:</label>
            <InputText @bind-Value="clientInformationUpdateDto.ContactEmailAddress" class="form-control" />
            <ValidationMessage For="@(() => clientInformationUpdateDto.ContactEmailAddress)" />
        </div>
    </div>
    <div class="form-group">
        <button disabled="@loading" class="btn btn-primary">
            @if (loading)
            {
                <span class="spinner-border spinner-border-sm mr-1"></span>
            }
            Save
        </button>
        <NavLink href="warehouse" class="btn btn-link">Cancel</NavLink>
    </div>
</EditForm>
}
else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private bool loading;

    private ClientInformationUpdateDto clientInformationUpdateDto { get; set; } = new ClientInformationUpdateDto();
    private ClientInformationReadDto clientInformationReadDto { get; set; } = new ClientInformationReadDto();

    protected override async Task OnInitializedAsync()
    {
        clientInformationReadDto = await clientInformationtService.GetClientInformationByIdAsync(Id);
        _mapper.Map(clientInformationReadDto, clientInformationUpdateDto);
    }

    public async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await clientInformationtService.EditClientInformationAsync(Id, clientInformationUpdateDto);
            AlertService.Success("Update successful", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("/clientinformation");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }

    }
}}