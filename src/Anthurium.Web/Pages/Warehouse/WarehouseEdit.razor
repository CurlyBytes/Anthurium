@page "/warehouse/{Id:int}/edit"
@attribute [Authorize]
@inject Services.IAlertService AlertService
@inject Services.IWarehouseService warehouseService
@inject NavigationManager NavigationManager
@using AutoMapper;
@inject IMapper _mapper;
@using Anthurium.API.Dtos


<h3>Warehouse</h3>
@if (warehouseReadDto != null)
{
    <EditForm Model="@warehouseUpdateDto" OnValidSubmit="OnValidSubmit">
        <DataAnnotationsValidator />
        <div class="form-row">
            <div class="form-group col">
                <label>Warehouse Name</label>
                <InputText @bind-Value="warehouseUpdateDto.WarehouseName" class="form-control" />
                <ValidationMessage For="@(() => warehouseUpdateDto.WarehouseName)" />
            </div>
            <div class="form-group col">
                <label>Warehouse Code:</label>
                <InputText @bind-Value="warehouseUpdateDto.WarehouseCode" class="form-control" />
                <ValidationMessage For="@(() => warehouseUpdateDto.WarehouseCode)" />
            </div>
        </div>

        <div class="form-group">
            <button disabled="@loading" class="btn btn-primary">
                @if (loading)
                {
                    <span class="spinner-border spinner-border-sm mr-1"></span>
                }
                Save
            </button>
            <NavLink href="warehouse" class="btn btn-link">Cancel</NavLink>
        </div>
    </EditForm>
}
else
{
    <div class="text-center p-3">
        <span class="spinner-border spinner-border-lg align-center"></span>
    </div>
}

@code {

    private WarehouseUpdateDto warehouseUpdateDto { get; set; } = new WarehouseUpdateDto();
    private WarehouseReadDto warehouseReadDto { get; set; } = new WarehouseReadDto();
    private bool loading;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        warehouseReadDto = await warehouseService.GetWarehouseByIdAsync(Id);
        _mapper.Map(warehouseReadDto, warehouseUpdateDto);
    }

    private async void OnValidSubmit()
    {
        loading = true;
        try
        {
            await warehouseService.EditWarehouseAsync(Id, warehouseUpdateDto);
            AlertService.Success("Update successful", keepAfterRouteChange: true);
            NavigationManager.NavigateTo("/warehouse");
        }
        catch (Exception ex)
        {
            AlertService.Error(ex.Message);
            loading = false;
            StateHasChanged();
        }
    }
}
