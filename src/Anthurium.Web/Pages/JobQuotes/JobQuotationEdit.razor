@page "/jobquotation/{Id:int}/edit"
@inject Services.JobQuotationService jobQuotationService
@inject Services.JobQuotationDetailsDetails jobQuotationDetailsService
@inject Services.ClientInformationService clientInformationService
@using AutoMapper;
@inject IMapper _mapper;
@using System.Text.Json;
@using Anthurium.API.Dtos
@inject IToastService toastService
@inject NavigationManager NavManager

<h3>Edit Job Quotation</h3>
@if (jobQuotationReadDto == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row m-2">

        <div class="offset-sm-9 col-sm-3 text-right"> <a class="btn btn-primary active btn-sm " role="button" aria-pressed="true" href="/jobquotation">Return to List</a></div>
    </div>
    <div class="row m-2">
        <EditForm Model="@jobQuotationUpdateDto" OnValidSubmit="@UpdateJobQuotation">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group row">
                <label for="clientInfomrationId" class="col-sm-6 col-form-label">Client Info:</label>
                <select id="clientInfomrationId" class="form-control selectpicker" value="@jobQuotationUpdateDto.ClientInformationId" @onchange="ChangeOrder">
                    <option>--select--</option>
                    @foreach (var item in clientInformationReadDto)
                    {
                        <option value="@item.ClientInformationId">@item.CompanyName</option>
                        // Blazor needs to know what values it binds to!
                    }
                </select>
            </div>
            <div class="form-group row">
                <label for="companyName" class="col-sm-6 col-form-label">Company Name:</label>
                <input id="companyName" class="form-control col-sm-6 input-lg" type="text" disabled="disabled"
                       @bind="jobQuotationUpdateDto.CompanyName" />
            </div>
            <div class="form-group row">
                <label for="companyAddress" class="col-sm-6 col-form-label">Company Address:</label>
                <input id="companyAddress" class="form-control col-sm-6 input-lg" type="text" disabled="disabled"
                       @bind="jobQuotationUpdateDto.CompanyAddress" />
            </div>


            <div class="form-group row">
                <label for="jobQuotationContactPerson" class="col-sm-6 col-form-label">Contact Person:</label>
                <input id="jobQuotationContactPerson" class="form-control col-sm-6 input-lg" type="text" disabled="@isSuccess"
                       @bind="jobQuotationUpdateDto.ContactPerson" placeholder="Contact Person" />
            </div>
            <div class="form-group row">
                <label for="jobQuotationContactNumber" class="col-sm-6 col-form-label">Contact Number:</label>
                <input id="jobQuotationContactNumber" class="form-control col-sm-6 input-lg" type="text" disabled="@isSuccess"
                       @bind="jobQuotationUpdateDto.ContactNumber" placeholder="Contact Number" />
            </div>

            <div class="form-group row">
                <label for="jobQuotationTimeStarted" class="col-sm-6 col-form-label">Contact Timestarted:</label>
                <input id="jobQuotationTimeStarted" class="form-control col-sm-6 input-lg" type="text" disabled="@isSuccess"
                       @bind="jobQuotationUpdateDto.Description" />
            </div>
            <div class="row">
                <button class="btn btn-primary" type="button" @onclick="AddField" disabled="@isSuccess"> Add JobQuotation Details</button>

            </div>
            @foreach (var item in jobQuotationDetailsUpdateDtoList.Select((value, i) => (value, i)))
            {
                <div class="form-row">
                    <div class="col-sm-4 ">
                        <label for="@item.value.Description" class="col-sm-6 col-form-label">Description:</label>
                        <input id="@item.value.Description" type="text" class="form-control" placeholder="Description" @bind="@item.value.Description">
                    </div>
                    <div class="col-sm-2">
                        <label for="@item.value.Cost" class="col-sm-2 col-form-label">Cost:</label>
                        <input id="@item.value.Cost" type="text" class="form-control" placeholder="Cost" @bind="@item.value.Cost" @onblur="() => ComputeCost(item.i)">
                    </div>
                    <div class="col-sm-2">
                        <label for="@item.value.Quantity" class="col-sm-2 col-form-label">Quantity:</label>
                        <input id="@item.value.Quantity" type="number" class="form-control" placeholder="Quantity" @bind="@item.value.Quantity" @onblur="() => ComputeCost(item.i)">
                    </div>
                    <div class="col-sm-2">

                        <label for="@item.value.TotalCost" class="col-sm-2 col-form-label">TotalCost:</label>
                        <input id="@item.value.TotalCost" type="text" class="form-control" placeholder="TotalCost" @bind="@item.value.TotalCost">
                    </div>
                    <div class="col-sm-2">
                        <button class="btn btn-danger" type="button" @onclick="() => RemoveField(item.value)">X</button>
                    </div>

                </div>
            }
            <div class="form-group row">
                <label for="jobQuotationTimeEnded" class="col-sm-6 col-form-label">Contact TimeEnded:</label>
                <input id="jobQuotationTimeEnded" class="form-control col-sm-6 input-lg" type="text" disabled="@isSuccess"
                       @bind="jobQuotationUpdateDto.OverallCost" />
            </div>


            <button class="btn btn-primary" type="submit" disabled="@isSuccess">Submit</button>
            <div class="alert @(isSuccess?"alert-success":"alert-danger")" style="margin-top:1rem" role="alert"
                 hidden="@(message=="")">@message</div>
            </EditForm>
        </div>

    }


@code {
    [Parameter]
    public int Id { get; set; }

    private bool isSuccess = false;
    private string message = "";

    private List<ClientInformationReadDto> clientInformationReadDto = new List<ClientInformationReadDto>();
    private List<JobQuotationDetailsUpdateDto> jobQuotationDetailsUpdateDtoList = new List<JobQuotationDetailsUpdateDto>();
    private List<JobQuotationDetailsReadDto> jobQuotationDetailsReadDtoList = new List<JobQuotationDetailsReadDto>();



    private JobQuotationUpdateDto jobQuotationUpdateDto { get; set; } = new JobQuotationUpdateDto();
    private JobQuotationReadDto jobQuotationReadDto { get; set; } = new JobQuotationReadDto();
    private JobQuotationChangeCreate jobQuotationChangeCreate = new JobQuotationChangeCreate();
    private ClientInformationReadDto clientInformationReadDtoSingle { get; set; } = new ClientInformationReadDto();

    protected override async Task OnInitializedAsync()
    {
        var currentJobQuotationDetailsList = await jobQuotationDetailsService.JobQuotationDetailsByJobOrder("JobQuotationDetailsId",Id);
        jobQuotationDetailsReadDtoList = currentJobQuotationDetailsList.JobQuotationDetailsApi;
        jobQuotationReadDto = await jobQuotationService.GetJobQuotationByIdAsync(Id);
        _mapper.Map(jobQuotationReadDto, jobQuotationUpdateDto);
        _mapper.Map(jobQuotationDetailsReadDtoList, jobQuotationDetailsUpdateDtoList);
        var response = await clientInformationService.GetClientInformationsAsync("CompanyName", 0);
        clientInformationReadDto = response.ClientInformation;


    }

    void AddField()
    {
        jobQuotationDetailsUpdateDtoList.Add(new JobQuotationDetailsUpdateDto());
    }

    void RemoveField(JobQuotationDetailsUpdateDto removeJobQuotation)
    {


        jobQuotationDetailsUpdateDtoList.Remove(removeJobQuotation);
    }


    public async void UpdateJobQuotation()
    {


        //returns response message, so can check if success
        var response = await jobQuotationService.EditJobQuotationAsync(Id, jobQuotationUpdateDto);
        if (response.IsSuccessStatusCode)
        {
            isSuccess = true;
            message = $"Success";
            toastService.ShowSuccess($" A job quotation from {jobQuotationUpdateDto.CompanyName} is Edited.");
            //navigate to single page
            //perhaps set flag (success) there that will display message if coming from this page
            NavManager.NavigateTo("/jobquotation");
        }
        else
        {
            toastService.ShowError($" Error on editing job quotation {jobQuotationUpdateDto.CompanyName} with ID {Id}.");
            message = $"Error: {response.StatusCode.ToString()}. Please try again.";

        }

        this.StateHasChanged();

    }

    private async Task ChangeOrder(ChangeEventArgs e)
    {

        clientInformationReadDtoSingle = await clientInformationService.GetClientInformationByIdAsync(Int32.Parse(e.Value.ToString()));
        _mapper.Map(clientInformationReadDtoSingle, jobQuotationChangeCreate);
        _mapper.Map(jobQuotationChangeCreate, jobQuotationUpdateDto);
        message = "";
    }

    private void ComputeCost(int Id)
    {

        jobQuotationDetailsUpdateDtoList[Id].TotalCost = jobQuotationDetailsUpdateDtoList[Id].Quantity * jobQuotationDetailsUpdateDtoList[Id].Cost;
        jobQuotationUpdateDto.OverallCost = jobQuotationDetailsUpdateDtoList.Sum(x => x.TotalCost);
    }
}