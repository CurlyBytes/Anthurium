@using Anthurium.Web.Pages.ClientInformations
@page "/"
@inject Services.IDashboardService dashboardService
@using Anthurium.API.Dtos
@using Models
@attribute [Authorize]
@inject Services.IAccountService AccountService
<h2>Dashboard</h2>


<div class="">
    <div class="row w-100">

        <div class="col-md-6">
            <div class="card border-danger mx-sm-1 p-3">
                <div class="card border-danger shadow text-info p-3 my-card"><span class="fa fa-user" aria-hidden="true"></span></div>
                <div class="text-info text-center mt-3"><h4>Total Clients</h4></div>
                <div class="text-info text-center mt-2"><h1>@_runningTotalOfClientsReadDto</h1></div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card border-info mx-sm-1 p-3">
                <div class="card border-warning shadow text-warning p-3 my-card"><span class="fa fa-diamond" aria-hidden="true"></span></div>
                <div class="text-info text-center mt-3"><h4>JobOrder Last month</h4></div>
                <div class="text-info text-center mt-2"><h1>@_dashboardJobOrderPerClientReadDto</h1></div>
            </div>
        </div>
    </div>
</div>
<!--/row-->


@code {
    private int _runningTotalOfClientsReadDto;
    private int _dashboardJobOrderPerClientReadDto;


    [CascadingParameter]
    private ClientInformationListParent ListPrefsProvider { get; set; }

    private int skip = 0;


    private async Task FetchListAsync()
    {
        var runningTotalOfClients = await dashboardService.RunningTotalOfClients();
        var jobOrderWithinMonth = await dashboardService.DashboardJobOrderPerClient();
        _runningTotalOfClientsReadDto = runningTotalOfClients;
        _dashboardJobOrderPerClientReadDto = jobOrderWithinMonth;

        // clientInformationReadDto = response.ClientInformation;
        // matchingCount = response.Count;
    }

    protected override async Task OnInitializedAsync()
    {
        await FetchListAsync();
    }

    private async Task ChangeOrder(ChangeEventArgs e)
    {
        ListPrefsProvider.listPrefs.OrderBy = e.Value.ToString();
        await ListPrefsProvider.SavePrefsAsync();
        skip = 0; //back to first page
        await FetchListAsync();
    }

    private async Task ChangeTop(ChangeEventArgs e)
    {
        ListPrefsProvider.listPrefs.NumResults = int.Parse(e.Value.ToString());
        await ListPrefsProvider.SavePrefsAsync();
        skip = 0; //back to first page
        await FetchListAsync();
    }

    private async Task PreviousPage()
    {
        skip -= ListPrefsProvider.listPrefs.NumResults;
        await FetchListAsync();
    }

    private async Task NextPage()
    {
        skip += ListPrefsProvider.listPrefs.NumResults;
        await FetchListAsync();
    }
}
