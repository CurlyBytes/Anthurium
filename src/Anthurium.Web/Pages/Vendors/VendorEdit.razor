@page "/vendor/{Id:int}/edit"
@inject Services.VendorService vendorService
@using AutoMapper;
@inject IMapper _mapper;
@using System.Text.Json
@using Anthurium.API.Dtos
@inject NavigationManager NavManager
@inject IToastService toastService

<h3>Edit Vendor Information</h3>
@if (vendorReadDto == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row m-2">

        <div class="offset-sm-9 col-sm-3 text-right"> <a class="btn btn-primary active btn-sm " role="button" aria-pressed="true" href="/vendor">Return to List</a></div>
    </div>
    <div class="row m-2">

        <EditForm Model="@vendorUpdateDto" OnValidSubmit="@UpdateVendor">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group row">
                <label for="companyName" class="col-sm-6 col-form-label">Vendor Name:</label>
                <input id="companyName" class="form-control col-sm-6 input-lg" placeholder="Vendor Name" disabled="@isSuccess"
                       @bind="vendorUpdateDto.VendorName" />
            </div>
            <div class="form-group row">
                <label for="companyAddress" class="col-sm-6 col-form-label">Vendor Code:</label>
                <input id="companyAddress" class="form-control col-sm-6 input-lg" type="text" placeholder="Vendor Code" disabled="@isSuccess"
                       @bind="vendorUpdateDto.VendorCode" />
            </div>


            <button class="btn btn-primary" type="submit" disabled="@isSuccess">Submit</button>
            <div class="alert @(isSuccess?"alert-success":"alert-danger")" style="margin-top:1rem" role="alert"
                 hidden="@(message=="")">@message</div>
            </EditForm>


        </div>
    }


@code {
    [Parameter]
    public int Id { get; set; }

    private bool isSuccess = false;
    private string message = "";

    private VendorUpdateDto vendorUpdateDto { get; set; } = new VendorUpdateDto();
    private VendorReadDto vendorReadDto { get; set; } = new VendorReadDto();

    protected override async Task OnInitializedAsync()
    {
        vendorReadDto = await vendorService.GetVendorByIdAsync(Id);
        _mapper.Map(vendorReadDto, vendorUpdateDto);
    }

    public async void UpdateVendor()
    {


        //returns response message, so can check if success
        var response = await vendorService.EditVendorAsync(Id, vendorUpdateDto);
        if (response.IsSuccessStatusCode)
        {
            isSuccess = true;
            message = $"Success";
            toastService.ShowInfo($" vendor information: {vendorUpdateDto.VendorName} is Updated.");
            NavManager.NavigateTo("/vendor");
            //navigate to single page
            //perhaps set flag (success) there that will display message if coming from this page
        }
        else
        {
            message = $"Error: {response.StatusCode.ToString()}. Please try again.";
            toastService.ShowError($" Cannot edit {vendorUpdateDto.VendorName}. Please try again.");
        }

        this.StateHasChanged();
    }
}