@page "/jobquotation/create"
@inject Services.JobQuotationService jobOrderService
@inject Services.ClientInformationService clientInformationService
@using System.Text.Json
@using Anthurium.API.Dtos
@inject NavigationManager NavManager
@using AutoMapper;
@inject IMapper _mapper;
@inject IToastService toastService

<h3>New Job Order</h3>
<div style="max-width: 1200px;">
    <EditForm Model="@jobQuotationCreateDto" OnValidSubmit="@PostJobQuotation">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group row">
            <label for="contactName" class="col-sm-6 col-form-label">Client Info:</label>
            <select class="form-control selectpicker" value="@jobQuotationCreateDto.ClientInformationId" @onchange="ChangeOrder">
                <option>--select--</option>
                @foreach (var item in clientInformationReadDto)
                {
                    <option value="@item.ClientInformationId">@item.CompanyName</option>
                    // Blazor needs to know what values it binds to!
                }
            </select>
        </div>

        <div class="form-group row">
            <label for="companyName" class="col-sm-6 col-form-label">Company Name:</label>
            <input id="companyName" class="form-control col-sm-6 input-lg" type="text" disabled
                   @bind="jobQuotationCreateDto.CompanyName" />
        </div>
        <div class="form-group row">
            <label for="companyAddress" class="col-sm-6 col-form-label">Company Address:</label>
            <input id="companyAddress" class="form-control col-sm-6 input-lg" type="text" disabled
                   @bind="jobQuotationCreateDto.CompanyAddress" />
        </div>

        <div class="form-group row">
            <label for="companyAddress" class="col-sm-6 col-form-label">Description</label>
            <input id="companyAddress" class="form-control col-sm-6 input-lg" type="text"
                   @bind="jobQuotationCreateDto.Description" />
        </div>
        <div class="row">
            <button class="btn btn-primary" type="button" @onclick="AddField" disabled="@isSuccess"> Add JobQuotation Details</button>

        </div>
        @foreach (var item in jobQuotationDetailsCreateDtoList)
        {
            <div class="form-row">
                <div class="col-sm-4 ">
                    <label for="@item.Description" class="col-sm-6 col-form-label">Description:</label>
                    <input id="@item.Description" type="text" class="form-control" placeholder="Description" @bind="@item.Description">
                </div>
                <div class="col-sm-2">
                    <label for="@item.Cost" class="col-sm-2 col-form-label">Cost:</label>
                    <input id="@item.Cost" type="text" class="form-control" placeholder="Cost" @bind="@item.Cost">
                </div>
                <div class="col-sm-2">
                    <label for="@item.Quantity" class="col-sm-2 col-form-label">Quantity:</label>
                    <input id="@item.Quantity" type="text" class="form-control" placeholder="Quantity" @bind="@item.Quantity">
                </div>
                <div class="col-sm-2">
                    <label for="@item.TotalCost" class="col-sm-2 col-form-label">TotalCost:</label>
                    <input id="@item.TotalCost" type="text" class="form-control" placeholder="TotalCost" @bind="@item.TotalCost">
                </div>
                <div class="col-sm-2">
                    <button class="btn btn-danger" type="button" @onclick="() => RemoveField(item)">X</button>
                </div>

            </div>
        }




        <div class="row">
            <button class="btn btn-primary" type="submit" disabled="@isSuccess">Submit</button>
            <div class="alert @(isSuccess?"alert-success":"alert-danger")" style="margin-top:1rem" role="alert"
                 hidden="@(message=="")">@message</div>
            </div>

        </EditForm>

    </div>
    @code {
        private List<ClientInformationReadDto> clientInformationReadDto = new List<ClientInformationReadDto>();
        private List<JobQuotationDetailsCreateDto> jobQuotationDetailsCreateDtoList = new List<JobQuotationDetailsCreateDto>();
        private JobQuotationCreateDto jobQuotationCreateDto = new JobQuotationCreateDto();
        private JobQuotationChangeCreate jobOrderChangeCreate = new JobQuotationChangeCreate();
        private ClientInformationReadDto clientInformationReadDtoSingle { get; set; } = new ClientInformationReadDto();

        private bool isSuccess = false;
        private string message = "";
        private int matchingCount;


        void AddField()
        {
            jobQuotationDetailsCreateDtoList.Add(new JobQuotationDetailsCreateDto());
        }

        void RemoveField(JobQuotationDetailsCreateDto removeJobQuotation)
        {
        

            jobQuotationDetailsCreateDtoList.Remove(removeJobQuotation);
        }

        private async Task FetchListAsync()
        {
            var response = await clientInformationService.GetClientInformationsAsync("CompanyName", 0);
            clientInformationReadDto = response.ClientInformation;
            matchingCount = response.Count; clientInformationReadDto = response.ClientInformation;


        }

        protected override async Task OnInitializedAsync()
        {
            await FetchListAsync();
        }

        public async void PostJobQuotation()
        {
            //returns response message, so can check if success
            jobQuotationCreateDto.JobQuotationDetails = jobQuotationDetailsCreateDtoList;
            var response = await jobOrderService.CreateJobQuotationAsync(jobQuotationCreateDto);
            if (response.IsSuccessStatusCode)
            {
                isSuccess = true;
                message = $"Success";
                toastService.ShowSuccess($" A job quotation from {jobQuotationCreateDto.CompanyName} is Created.");
                NavManager.NavigateTo("/jobquotation");
            }
            else
                message = $"Error: {response.StatusCode.ToString()}. Please try again.";
            this.StateHasChanged();
        }

        private async Task ChangeOrder(ChangeEventArgs e)
        {

            clientInformationReadDtoSingle = await clientInformationService.GetClientInformationByIdAsync(Int32.Parse(e.Value.ToString()));
            _mapper.Map(clientInformationReadDtoSingle, jobOrderChangeCreate);
            _mapper.Map(jobOrderChangeCreate, jobQuotationCreateDto);
            message = "";
        }
    }
